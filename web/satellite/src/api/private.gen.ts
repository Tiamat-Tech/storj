// AUTOGENERATED BY private/apigen
// DO NOT EDIT.

import { HttpClient } from '@/utils/httpClient';
import { Time, UUID } from '@/types/common';

export class FreezeStat {
    frozen: boolean;
    warned: boolean;
    trialExpiredFrozen: boolean;
    trialExpirationGracePeriod: number;
}

export class KindInfo {
    value: number;
    name: string;
    hasPaidPrivileges: boolean;
}

export class UserAccount {
    id: UUID;
    externalID: string;
    fullName: string;
    shortName: string;
    email: string;
    partner: string;
    projectLimit: number;
    projectStorageLimit: number;
    projectBandwidthLimit: number;
    projectSegmentLimit: number;
    isProfessional: boolean;
    position: string;
    companyName: string;
    employeeCount: string;
    haveSalesContact: boolean;
    paidTier: boolean;
    kindInfo: KindInfo;
    isMFAEnabled: boolean;
    mfaRecoveryCodeCount: number;
    createdAt: Time;
    pendingVerification: boolean;
    trialExpiration: Time | null;
    hasVarPartner: boolean;
    freezeStatus: FreezeStat;
}

export class APIError extends Error {
    constructor(
        public readonly msg: string,
        public readonly responseStatusCode?: number,
    ) {
        super(msg);
    }
}

export class AuthManagementHttpApiV1 {
    private readonly http: HttpClient = new HttpClient();
    private readonly ROOT_PATH: string = '/api/v1/auth';

    public async getUserAccount(): Promise<UserAccount> {
        const fullPath = `${this.ROOT_PATH}/account`;
        const response = await this.http.get(fullPath);
        if (response.ok) {
            return response.json().then((body) => body as UserAccount);
        }
        const err = await response.json();
        throw new APIError(err.error, response.status);
    }
}
